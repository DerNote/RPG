<table width="auto">
	<tbody>
		<tr>
			<td>
				<div>
					<h3>
						Characters name
					</h3>
					<p>
						Test
					</p>
				</div>
			</td>
			<td>
				<h4>
					HP
				</h4>
				<p>
					${data.Hp}
				</p>
			</td>
		</tr>
		<tr>
			<td>
				<div>
					<h4>
						Equipment
					</h4>
					<h5>
						Gear
					</h5>
					<ul>
						<li>
							Main weapon
							<br />
							<strong>
								 ${data.Equipment.Gear.Main}
							</strong>
							<br />
							<em>
								 ${data.Equipment.Gear.MainDescription}
							</em>
						</li>
						<li>
							Side arm
							<br />
							<strong>
								 ${data.Equipment.Gear.Secondary}
							</strong>
							<br />
							<em>
								 ${data.Equipment.Gear.SecondaryDescription}
							</em>
						</li>
					</ul>
					<h5>
						Active equipment
					</h5>
					<ul>
						<li>
							<strong>
								 ${data.Equipment.Active[i].name}
							</strong>
							<br />
							<em>
								 ${data.Equipment.Active[i].Description}
							</em>
						</li>
					</ul>
				</div>
			</td>
			<td>
				<h4>
					Feats
				</h4>
				<ul>
					<li>
						<strong>
							 ${data.Feats[i].Name}
						</strong>
						<br />
						<em>
							 ${data.Feats[i].Description}
						</em>
					</li>
				</ul>
			</td>
		</tr>
		<tr>
			<td>
				<div>
					<h4>
						Ammo belt
					</h4>
					<p>
						4 magazines of Jimmy rifle (20 bulets per magizine)
						<br />
						 2 magazine of 1822 handgun ammo
					</p>
				</div>
			</td>
			<td>
				<h4>
					Knapsack
				</h4>
				<ul>
					<li>
						Second set of clothes
					</li>
					<li>
						10m of rope
					</li>
					<li>
						Canned rations
					</li>
					<li>
						Empty
					</li>
				</ul>
			</td>
		</tr>
	</tbody>
</table>



chatSocket.onmessage = function(e){
	console.log('onmessage');
	const data = JSON.parse(e.data);
	console.log(data);
	document.querySelector('#chat-messages').value += (data.message + '\n');
	if(data.message){
		let html = '<div>';
			html += "<p>" + data.username + '</p>';
			html += '<p>' + data.message +'</p>';
			html += '</div>';
		document.querySelector('#chat-messages') += html;
	}else{
		alert('empty message box!');
	}
}

async def recieve(self, text_data):
data = json.loads(text_data)
print("recieving"+ data)
message = data['message']
username = data['username']
room = data['room']
await self.channel_layer.group_send(
	self.room_group_name, {
		 'type': 'chat.message',
		 'message': message,
		 'username': username,
		 'room': room,
	 }
)

async def chat_message(self, event):
message = event['message']
username = event['username']
room = event['room']
await self.send(text_data=json.dumps({
	'message': message,
	'username': username,
	'room': room,
}))


<select>
	{% for items in range({{Items|length}}) %}
	{% if item.Tag == '4' %}
		{% if player_data.Equipment.Active.name == item.Name %}
		<option selected value="{{item.Name}}">{{item.Name}}</option>
		{% else %}
		<option value="{{item.Name}}">{{item.Name}}</option>
		{% endif %}
	{%endif%}
</select>


    print("fillter")
    myquery = {"Player":list.Player}
    newvalues={ "$set": list }
    Player_collection.update_one(myquery, newvalues)
    player_data = Player_collection.find_one({'Player': list.Player})
    return render(request, "items/Player_view.html", {'player_data':player_data})  

	        try:
            received_data = json.loads(request.body.decode('utf-8'))  # Parse the JSON data
            # Process the received_data as needed
            # Example: Accessing the 'key' sent in the JSON
            if 'key' in received_data:
                value = received_data['key']
                print(value)  # Do something with the received value
            else:
                return JsonResponse({'error': 'Key not found in JSON'}, status=400)
            # Return a JSON response if required
            return JsonResponse({'message': 'Data received successfully'})
        except json.JSONDecodeError:
            return JsonResponse({'error': 'Invalid JSON'}, status=400)

        const csrftoken = getCookie('csrftoken');

        fetch('update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': csrftoken
          },
          body: jsonString,
        })


		received_data = json.loads(request.body.decode('utf-8'))
        print("fillter")
        myquery = {"Player":received_data.Player}
        newvalues={ "$set": received_data }
        Player_collection.update_one(myquery, newvalues)
        Player_collection.update_one()
        player_data = Player_collection.find_one({'Player': 'Martynas'})
        return render(request, "items/Player_view.html", {'player_data':player_data})  

js for Player.html
  document.addEventListener("DOMContentLoaded", function() {
    const selectElement = document.getElementById("mySelect");
    const selectElement2 = document.getElementById("myFeats");

    function handleSelect1(selecter) {
        const jsonData = '{{ player_data.Equipment.Active|escapejs|safe }}';
        const formattedData = jsonData.replace(/'/g, '"');
        const equipmentList = JSON.parse(formattedData);

        const equipmentListLen = '{{player_data.Equipment.Active|length}}'
        // Clone the select element and append it to different locations on the page
        for (let x = 0; x < equipmentListLen; x++) {
          const clonedSelect = selecter.cloneNode(true);
          
          // Function to set the default selected index based on Player_data.Equipment.Active[x].name
          function setSelectedIndex(clonedSelect, activeName) {
            for (let i = 0; i < clonedSelect.options.length; i++) {
              if (clonedSelect.options[i].value === activeName) {
                clonedSelect.selectedIndex = i;
                break;
              }
            }
          }
          // Set the default selected index for the cloned select element
          setSelectedIndex(clonedSelect, equipmentList[x].name);
      
          // Display the cloned select element
          clonedSelect.style.display = "inline-block";
      
          // Append the cloned select element to different locations on the page
          document.getElementById("item" + (x + 1)).appendChild(clonedSelect);
        }
    }

    function handleSelect2(selecter){
      const jsonData = '{{ player_data.Feats|escapejs|safe }}';
      const formattedData = jsonData.replace(/'/g, '"');
      const featList = JSON.parse(formattedData);

      const featListLen = '{{player_data.Feats|length}}'
      for (let x = 0; x < featListLen; x++) {
        const clonedSelect = selecter.cloneNode(true);

        function setSelectedIndex(clonedSelect, featName) {
          for (let i = 0; i < clonedSelect.options.length; i++) {
            if (clonedSelect.options[i].value === featName) {
              clonedSelect.selectedIndex = i;
              break;
            }
          }
        }
        setSelectedIndex(clonedSelect, featList[x].Name);
        
        clonedSelect.style.display = "inline-block";

        document.getElementById("Feats" + (x + 1)).appendChild(clonedSelect);
      }
    }

    handleSelect1(selectElement);
    handleSelect2(selectElement2);
  });

  window.addEventListener('DOMContentLoaded', () => {
    document.querySelector('#Save').onclick = function(e){
      e.preventDefault();
        var jsoniukas= new Object();

        const jsonData = '{{ Items4|escapejs|safe }}';
        const formattedData = jsonData.replace(/'/g, '"');
        const Item_list= JSON.parse(formattedData);

        const jsonData2 = '{{player_data2|escapejs|safe}}';
        const formattedData2 = jsonData2.replace(/'/g, '"');
        const Player_data_js= JSON.parse(formattedData2);

        const jsonData3 = '{{Feats2|escapejs|safe}}';
        const formattedData3 = jsonData2.replace(/'/g, '"');
        const Feat_data_js= JSON.parse(formattedData2)

        /* Characters HP */
        const name = document.querySelector('#player-Name');
        if (name.value != '' && '{{player_data.Name}}' != name.value) {
          jsoniukas.name=name.value;
        }

        /* Current HP */
        const curentHp = document.querySelector('#Hp');
        if (curentHp.value != '' && '{{player_data.Hp_current}}'!= curentHp.value){
          jsoniukas.Hp_current=curentHp.value;
        }

        /* Max HP */
        const MaxHp = document.querySelector('#HpMax');
        if (MaxHp.value != '' && '{{player_data.Hp_max}}'!= MaxHp.value){
          jsoniukas.Hp_current=MaxHp.value;
        }
        
        /* Gear */
        const MainW = document.querySelector('#Main');
        if ('{{player_data.Equipment.Gear.Main}}' != MainW.value){
          jsoniukas.Equipment = jsoniukas.Equipment || {};
          jsoniukas.Equipment.Gear = jsoniukas.Equipment.Gear || {};
          jsoniukas.Equipment.Gear.Main=MainW.value;
          jsoniukas.Equipment.Gear.MainDescription=null;
          for(let x = 0; x < '{{Item_len}}'; x++){
            if(MainW.value == Item_list[x].Name){
              jsoniukas.Equipment.Gear.MainDescription=Item_list[x].Description;
            } 
          }
        }

        const SecondaryW = document.querySelector('#Secondary');
        if ('{{player_data.Equipment.Gear.Secondary}}' != SecondaryW.value){
          jsoniukas.Equipment = jsoniukas.Equipment || {};
          jsoniukas.Equipment.Gear = jsoniukas.Equipment.Gear || {};
          jsoniukas.Equipment.Gear.Secondary=SecondaryW.value;
          jsoniukas.Equipment.Gear.SecondaryDescription=null;
          for(let x = 0; x < '{{Item_len}}'; x++){
            if(SecondaryW.value == Item_list[x].Name){
              jsoniukas.Equipment.Gear.SecondaryDescription=Item_list[x].Description;
            } 
          }
        }

        /* active equipment */
        const GearElements = document.querySelectorAll('[id^="item"]');
        const numberOfElementsGear = GearElements.length;

        for(let x = 1; x <= numberOfElementsGear; x++){
          let divName = '#item'+ x
          let filler = document.querySelector(divName);
          let ActiveE = filler.querySelector('#mySelect');
          if (Player_data_js.Equipment.Active[x-1].name != ActiveE.value){
            jsoniukas.Equipment = jsoniukas.Equipment || {};
            jsoniukas.Equipment.Active = jsoniukas.Equipment.Active || {};
            jsoniukas.Equipment.Active[x-1] = jsoniukas.Equipment.Active[x-1] || {};

            jsoniukas.Equipment.Active[x-1].name=ActiveE.value;
            jsoniukas.Equipment.Active[x-1].Description=null;
            for(let i = 0; i < '{{Item_len}}'; i++){
              if(ActiveE.value == Item_list[i].Name){
                jsoniukas.Equipment.Active[x-1].Description=Item_list[i].Description;
              } 
            }
          }
        }

        /* Feats/Flaws */
        const FeatElements = document.querySelectorAll('[id^="item"]');
        const numberOfElementsFeats = FeatElements.length;

        for(let x = 1; x <= numberOfElementsFeats; x++){
          let divName = '#Feats'+ x;
          let filler = document.querySelector(divName);
          let ActiveF = filler.querySelector('#myFeats');
          if (Player_data_js.Feats[x-1].Name != ActiveF.value){
            jsoniukas.Feats = jsoniukas.Feats || {};
            jsoniukas.Feats[x-1] = jsoniukas.Feats[x-1] || {};

            jsoniukas.Feats[x-1].Name = ActiveF.value;
            jsoniukas.Feats[x-1].Description=null;
            for(let i =0; i < Feat_data_js.length; i++){
              if(ActiveF.value == Feat_data_js[i].Name){
                jsoniukas.Feats[x-1].Description=Feat_data_js[i].Description;
              }
            }
          }
        }

        /* Knapsack */
        for(let x = 0; x < 5; x++){
          let divName = '#knap'+ (x+1);
          let ActiveK = document.querySelector(divName);

          if( ActiveK.value != '' && ActiveK.value != Player_data_js.Pouch[x].Name){
            jsoniukas.Pouch = jsoniukas.Pouch || {}
            jsoniukas.Pouch[x] = jsoniukas.Pouch[x] || {}
            jsoniukas.Pouch[x].Name=ActiveK.value
          }
        }
        jsoniukas.Player=Player_data_js.Player;

        var jsonString= JSON.stringify(jsoniukas);
        console.log(jsonString);
        csrftoken =getCookie('csrftoken');

        
    };
  });
  function getCookie(name) {
    const cookieValue = document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)');
    return cookieValue ? cookieValue.pop() : '';
  }